Tech Lead Onboarding - Authentication and OpenAI Server Documentation
Link: https://tl-onboarding-project-dxm7krgnwa-uc.a.run.app

The server acts as a proxy between users/devs and the OpenAI API so you 
don't need to pay/register for API access!

Server Runtime: Bun
Authentication: JWT (JSON Web Tokens)
 - JWTs contain the username of the user and an expiration date
 - Tokens expire 1 hr after issue

The server has four publicly accessible endpoints:
 - `/` (GET): Returns a "Hello, World!" message to the user

---------------------------------------------------------------------------

 - `/login` (POST): Returns a JWT if given a correct username and password
 combination. Otherwise it throws a 401 error.

Example Frontend Fetch:
fetch("https://tl-onboarding-project-dxm7krgnwa-uc.a.run.app/login", {
    method: "POST",
    body: JSON.stringify({
        username: YOUR_USERNAME,
        password: YOUR_PASSWORD
    })
  }).then(res => res.json()).then(res => console.log(res))

---------------------------------------------------------------------------

 - `/prompt` (POST): If the user is authenticated and provides a correctly
 formatted OpenAI prompt, the endpoint sends the prompt to OpenAI and returns
 the response it receives from OpenAI. 

Example Frontend Fetch:
fetch("https://tl-onboarding-project-dxm7krgnwa-uc.a.run.app/prompt", {
    method: "POST",
    headers: {
        Authorization: "Bearer <JWT>" // Add your JWT here!
    },
    body: JSON.stringify({
        model: "gpt-4o",
        messages: [{ role: "user", content: "What is 1+1?" }]
    })
}).then(res => res.json()).then(res => console.log(res))

---------------------------------------------------------------------------

- `/ws-prompt` (GET/WebSocket): Executes a OpenAI GPT prompt and returns the
response as a stream of data. A valid JWT must be passed through the
sec-websocket-protocol header. A prompt should be sent as a JSON string through
the websocket connection.

Example WS Connection:
const socket = new WebSocket('http://localhost:8080/ws-prompt', [userJWT]);
socket.addEventListener('open', () => {
    socket.send(JSON.stringify({
    model: "gpt-4o",
    messages: [{ role: "user", content: "What is 1+1?" }],
    stream: true
    }))
})
socket.addEventListener('message', (evt) => {
    const chunk = evt.data;
    console.log(chunk);
})
 

For help on how to structure your OpenAI prompts and avaliable config options,
check out OpenAI's documentation: 
https://platform.openai.com/docs/guides/text-generation/chat-completions-api
